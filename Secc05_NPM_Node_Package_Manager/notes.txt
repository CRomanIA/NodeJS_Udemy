//Secc5_cap37
//Node package manager
//administrador de paquetes
//es un programa que permite administrar los paquetes que node que yo puedo instalar (global-local)

//npm install -g npm@6.x.x **de forma global@version**

/* 
Secc05_cap38:
Package.json
//contiene la informacion base de el proyecto (se levanta con consola)
se levanta con npm init (para configurarlo)
sino con npm init --yes (para generar automaticamente)
*/

/*
Secc05_cap39:
Instalar un paquete de node
//para instalar los paquetes modules, npm i 'nombre modulo'
se genera directorio node_modules
al momento de generar este directorio, se genera un archivo de dependencia en package.json
*/

/*
Secc05_cap40:
Forma de utilizar un paquete:
existen 3 formas de utlizar un paquete...
ir a index.js
*/

/*
Secc05_cap41:
Dependencias
ir a package.json para ver dependencias
instalar dependencia mongoose = npm i mongoose
mongoose: permite interactuar con bases de datos de mongo db 
revisar si la instalacion se realizó en node_modules
revisar en package.json (del modulo de mongoose) para ver las dependencias de mongoose
*/

/*
Secc05_cap42:
Control de recursos de Git
si queremos hacer una copia en github o cualquier sistema de control de versiones, 
si uno no hace la config adecuada, se subiran todos los modulo y eso consumira mucho el 
tamaño del proyecto.

la solucion:
-si borramos node_modules, perderemos toda la paquetería de los componentes para trabajar
-el package.json es el que manda como va a estar estructurado y sus dependencias, 
-por ende si se borra, el package.json será el que hará toda la instalación de todo al momento
-de hacer un npm install en el proyecto...
esto deja claro que solo se necesita distribuir o almacenar los archivos en vez los modulos
.gitignore = para ignorar los archivos que no quieras enviar al repositorio
se crea el archivo y se le dice que node_modules, no sea enviado al repositorio para que no lo contemple
*/

/*
Secc05_cap43:
Version de los paquetes:
versionado de paquetes en node
es un estanda, las versiones son semanticas
ir a package.json...
identificar que significan ^x.x.x o ~x.x.x
versionado semantico = X Y Z
x = mayor version (cuando se le hacen grandes cambios y esos cambios no son compatibles con versiones anteriores. )
y = menor version (se le agregan nuevas funcionalides al paquete, o se le a modificado algunas que ya tenian, un parametro o un conjunto grandes de bugs )
z = version de parches (correccion de bugs o de errores dentro de una ubicacion especifica)
caracteres ^ = acepta instalar versiones dentro de la mayor version.
caracteres ~ = acepta instalar versiones dentro de la menor version.
si no aparece ningun caracter, es la version concreta, que no quieran sacar una version por mucho tiempo
*/

/*
Secc05_cap44:
Listando paquetes instalados:
en cmd:
npm list
con npm list, podemos ver la rama de los paquetes y sus dependencias distintas, 
para cuando una quiera conocer toda la paqueteria que esta instalada
npm list --depth=0 
para ver solo los paquetes generales
*/

/*
Secc05_cap45:
Informacion de los paquetes:
en cmd:
npm view 'nombre del paquete'
ej: npm view mongoose
para obtener solo la informacion de las dependencias del paquete:
npm view 'nombre del paquete' dependencies
ej: npm view mongoose dependecies
*/


/*
Secc05_cap46:
Instalando una version en especifico:
como se puede instalar una version en especifica de un paquete de node_modules
en cmd:
npm i 'nombre del paquete'@x.x.x 
ej: npm i colors@1.3.2 (una version anterior a la actual)
*/

/*
Secc05_cap47:
Actualizacion de paquete:
en cmd:
con npm outdate:
detecta las versiones de paquetes actualizables.
npm-check-updates:
para instalar: npm i -g npm-check-update (en modo administrador)

npm-check-updates: hace el analisis de la paqueteria que 
tengas en el proyecto e identifica si es necesario realizar el upgrade
ncu -u: lo que hace es una modificacion del archivo package.json
para luego realizar un npm install
y se estaría instalando la nueva version del proyecto 
*/

/*
Secc05_cap48:
dependencias dev:
son dependencias de modulos que solo se utilizaran en el desarrollo, 
mas no en la ejecucion del proyecto

para crear un proyecto: npm init
para levantar dependencias de desarrollo: npm install --save-dev paquete
dependencia normal: npm install --save paquete
resumida: npm i -D 'nombre de dependencia'

la diferencia dev: es solo la dependencia de desarrollo
*/

/*
Secc05_cap49:
Desinstalar un paquete:
para desinstalar un paquete es: npm uninstall paquete
version resumida: npm un paquete
*/

/*
Secc05_cap50:
Paquetes globales:
para hacer la instalacion de manera global debemos tener privilegios de administrador
los paquetes globales no se van a crear en la carpeta del proyecto, sino se van a instalar en la 
carpeta npm, asi se va a ver a nivel de sistema operativo
npm tambien tiene una carpeta node_modules donde instala sus paquetes de manera global
npm i -g outdated: para ver cuales son los paquetes que tenemos de manera global y ver cual es
la que debemos actualizar
para desinstalar: npm un -g paquete (como administrador)
*/